@model Core.DTOs.OrdenPagoCompras.OrdenPagoComprasAddViewModel
@using Core
<div class="m-content" style="width: 100%">
	<div class="row">
		<div class="col-md-12">
			<div class="m-portlet m-portlet--tab">
				<div class="m-portlet__head">
					<div class="row">
						<div class="col-md-4 col-sm-4">
							<div class="m-portlet__head-caption">
								<div class="m-portlet__head-title" style="margin-top: 20px;">
									<h3 class="m-portlet__head-text">
										Orden de Pago
									</h3>
								</div>
							</div>
						</div>
						<!-- ko if: estado() == @((int)Constants.OrdenPagoCompraEstado.Pendiente)  -->
						<div class="col-md-4 col-sm-4" align="right">
							<div class="m-portlet__head-title" style="margin-top: 20px;">
								<button type="button" class="btn btn-danger" data-bind="click: anularPagoCompra">
									Anular
								</button>
							</div>
						</div>
						<div class="col-md-4 col-sm-4" align="right">
							<div class="m-portlet__head-title" style="margin-top: 20px;">
								<button type="button" class="btn btn-md btn-outline-primary m-0 px-3 py-2 z-depth-0 waves-effect" data-bind="click: showPagoCompraModal">
									Confirmar
								</button>
							</div>
						</div>
						<!-- /ko -->
					</div>

				</div>
				<!--begin::Form-->
				<form class="m-form m-form--fit m-form--label-align-right">
					<div class="m-portlet__body">
						<div class="row" style="margin-bottom: 20px;">
							<div class="col-md-6">
								<div class="form-group m-form__group row">
									<label for="example-text-input" class="col-2 col-form-label" style="text-align: left">
										Ruc
									</label>
									<div class="col-6">
										<input class="form-control m-input" type="text" id="example-text-input" data-bind="value: dataViewModel.proveedor.ruc">
									</div>
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-group m-form__group row">
									<label for="example-text-input" class="col-4 col-form-label" style="text-align: left">
										Nombre o Razon Social
									</label>
									<div class="col-8">
										<input class="form-control m-input" type="text" id="example-text-input" data-bind="value: dataViewModel.proveedor.displayName">
									</div>
								</div>
							</div>
						</div>
					</div>
				</form>
			</div>
			<div class="m-portlet m-portlet--tab">
				<div class="m-portlet__head">
					<div class="m-portlet__head-caption">
						<div class="m-portlet__head-title">
							<h3 class="m-portlet__head-text">
								Compras a Pagar
							</h3>
						</div>
					</div>
				</div>

				<div class="m-portlet__body">
					<!--begin: Datatable -->
					<table id="detalleAddCompraTable" class="table m-table m-table--head-bg-success">
						<thead>
							<tr>
								<th>
									Fecha
								</th>
								<th>
									Monto
								</th>


							</tr>

						</thead>
						<tbody data-bind="foreach: ordenPagoDetalle">
							<tr>
								<td data-bind="text: moment(dateCompra()).format('DD/MM/YYYY')"></td>
								<td data-bind="text: monto"></td>

							</tr>
						</tbody>
						<tfoot>

							<tr>
								<td colspan="1" style="text-align : center">Monto Total </td>
								<td data-bind="text: montoTotal"></td>
							</tr>
						</tfoot>
					</table>
					<!--end: Datatable -->
				</div>
			</div>
		</div>
	</div>
</div>
@{
	Html.RenderPartial("~/Areas/Platform/Views/Shared/_ListaComprasModal.cshtml");
	Html.RenderPartial("~/Areas/Platform/Views/Shared/_ListaProveedoresModal.cshtml");

}
@{

	Html.RenderPartial("~/Areas/Platform/Views/Shared/_AddPagoCompraModal.cshtml");

}
<!-- /content -->
@section scripts{
	<script>
        var model = @Html.Raw(Json.Serialize(Model));
        var dataViewModel = ko.mapping.fromJS(model);


        dataViewModel.montoTotal = ko.pureComputed(function () {
            var total = dataViewModel.ordenPagoDetalle().reduce(function (a, b) {
                return a + b.monto();
            }, 0)
            return total;
		})

		dataViewModel.showPagoCompraModal = function () {
			$("#addPagoCompraModal").modal("show");
		}

		dataViewModel.pagoCompra.cambio = ko.pureComputed(function () {
			if (dataViewModel.pagoCompra.monto() > dataViewModel.montoTotal()) {
				return dataViewModel.pagoCompra.monto() - dataViewModel.montoTotal();
			} else {
				return 0;
			}

		});

        dataViewModel.anularPagoCompra = function () {

            $.ajax({
                url: "@Url.Action("Anular", "OrdenPagoCompras")",
                type: "POST",
                data: { id: dataViewModel.id() },
                success: function (response) {
                    if (response.success) {
                        showSuccessAndGoToUrl(response.message, '@Url.Action("Index", "OrdenPagoCompras", new { area = "Platform"})');
                    } else {
                        showError(response.message);
                    }
                },
                error: function () {
                    showError();
                }
            });


            return false;
        }
       dataViewModel.confirmarPagoCompra = function () {

          $.ajax({
                url: "@Url.Action("Confirmar", "OrdenPagoCompras")",
                type: "POST",
                data: { model: ko.toJSON(dataViewModel)},
                success: function (response) {
                    if (response.success) {
                        showSuccessAndGoToUrl(response.message, '@Url.Action("Index", "OrdenPagoCompras", new { area = "Platform"})');
                    } else {
                        showError(response.message);
                    }
                },
                error: function () {
                    showError();
                }
            });
            return false;
        }
		ko.applyBindings(dataViewModel);


		jQuery.validator.addMethod("pagoCompraMontoValid", function (value, element) {
			return parseInt(value) >= parseInt($("#pagoCompraMontoTotal").val())
		}, "El monto a pagar debe ser mayor o igual al total");

		$('#pagoCompraForm').validate({
			rules: {
				pagoCompraMonto: {
					pagoCompraMontoValid: true
				}
			},
			errorPlacement: function (error, element) {
				var span = element.siblings('span');
				error.appendTo(span);
			}
		});
	</script>
}